name: 'Bump Theme Version (Release)'
description: 'Updates version across all Hello Elementor theme files including SCSS'

inputs:
  CLEAN_PACKAGE_VERSION:
    required: true
    description: 'Current clean version (without v prefix)'
  VERSION_TYPE:
    required: true
    description: 'Version bump type (current|patch|minor|major)'

runs:
  using: 'composite'
  steps:
    - name: Calculate new version
      shell: bash
      run: |
        CURRENT_VERSION="${{ inputs.CLEAN_PACKAGE_VERSION }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case "${{ inputs.VERSION_TYPE }}" in
          "current")
            # Keep version as-is for first release
            NEW_VERSION="$CURRENT_VERSION"
            ;;
          "major")
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
            ;;
          "minor")
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
            ;;
          "patch")
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            ;;
        esac
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "Version will be: $CURRENT_VERSION → $NEW_VERSION"

    - name: Update functions.php version
      shell: bash
      run: |
        sed -i.bak "s/define( 'HELLO_ELEMENTOR_VERSION', '[^']*' );/define( 'HELLO_ELEMENTOR_VERSION', '$NEW_VERSION' );/" functions.php
        rm functions.php.bak
        # Verify functions.php was actually updated
        if ! grep -q "HELLO_ELEMENTOR_VERSION.*$NEW_VERSION" functions.php; then
          echo "Error: Failed to update version in functions.php"
          exit 1
        fi
        echo "✅ Updated functions.php HELLO_ELEMENTOR_VERSION to $NEW_VERSION"

    - name: Update package.json version
      shell: bash
      run: |
        if [ "$NEW_VERSION" = "$CURRENT_VERSION" ]; then
          echo "Version unchanged ($CURRENT_VERSION), skipping npm version bump."
        else
          npm version --no-git-tag-version $NEW_VERSION
        fi

    - name: Update style.css version
      shell: bash
      run: |
        sed -i.bak "s/Version: .*/Version: $NEW_VERSION/" style.css
        rm style.css.bak
        # Verify style.css was actually updated
        if ! grep -q "Version: $NEW_VERSION" style.css; then
          echo "Error: Failed to update version in style.css"
          echo "Current content:"
          grep -A2 -B2 "Version:" style.css || echo "No Version: field found"
          exit 1
        fi
        echo "✅ Updated style.css Version to $NEW_VERSION"

    - name: Update assets/scss/style.scss version (Hello Theme specific)
      shell: bash
      run: |
        if [ -f "assets/scss/style.scss" ]; then
          sed -i.bak -e "s/Version: .*/Version: $NEW_VERSION/" -e "s/Stable tag: .*/Stable tag: $NEW_VERSION/" assets/scss/style.scss
          rm assets/scss/style.scss.bak
          
          # Verify that SCSS file was updated
          VALIDATION_PASSED=true
          
          # Check Version field
          if grep -q "Version:" assets/scss/style.scss; then
            if ! grep -q "Version: $NEW_VERSION" assets/scss/style.scss; then
              echo "Error: Failed to update Version in assets/scss/style.scss"
              VALIDATION_PASSED=false
            else
              echo "✅ Updated assets/scss/style.scss Version to $NEW_VERSION"
            fi
          else
            echo "ℹ️ No 'Version:' field found in assets/scss/style.scss"
          fi
          
          # Check Stable tag field  
          if grep -q "Stable tag:" assets/scss/style.scss; then
            if ! grep -q "Stable tag: $NEW_VERSION" assets/scss/style.scss; then
              echo "Error: Failed to update Stable tag in assets/scss/style.scss"
              VALIDATION_PASSED=false
            else
              echo "✅ Updated assets/scss/style.scss Stable tag to $NEW_VERSION"
            fi
          else
            echo "ℹ️ No 'Stable tag:' field found in assets/scss/style.scss"
          fi
          
          if [ "$VALIDATION_PASSED" = "false" ]; then
            echo "❌ assets/scss/style.scss version update failed"
            exit 1
          fi
        else
          echo "ℹ️ No assets/scss/style.scss file found, skipping SCSS version update"
        fi

    - name: Update readme.txt stable tag and version
      shell: bash
      run: |
        # Update fields that exist in the file
        sed -i.bak -e "s/^Stable tag: .*/Stable tag: $NEW_VERSION/" -e "s/^Version: .*/Version: $NEW_VERSION/" readme.txt
        rm readme.txt.bak
        
        # Verify that fields were updated (check each field independently)
        VALIDATION_PASSED=true
        
        # Check if Stable tag field exists and was updated
        if grep -q "^Stable tag:" readme.txt; then
          if ! grep -q "^Stable tag: $NEW_VERSION" readme.txt; then
            echo "Error: Found 'Stable tag:' field but failed to update it to $NEW_VERSION"
            VALIDATION_PASSED=false
          else
            echo "✅ Updated readme.txt Stable tag to $NEW_VERSION"
          fi
        else
          echo "ℹ️ No 'Stable tag:' field found in readme.txt"
        fi
        
        # Check if Version field exists and was updated
        if grep -q "^Version:" readme.txt; then
          if ! grep -q "^Version: $NEW_VERSION" readme.txt; then
            echo "Error: Found 'Version:' field but failed to update it to $NEW_VERSION"
            VALIDATION_PASSED=false
          else
            echo "✅ Updated readme.txt Version to $NEW_VERSION"
          fi
        else
          echo "ℹ️ No 'Version:' field found in readme.txt"
        fi
        
        if [ "$VALIDATION_PASSED" = "false" ]; then
          echo "❌ readme.txt version update failed"
          exit 1
        fi
        
        echo "✅ readme.txt version update completed successfully" 

    - name: Set PACKAGE_VERSION from NEW_VERSION
      shell: bash
      run: echo "PACKAGE_VERSION=$NEW_VERSION" >> $GITHUB_ENV
